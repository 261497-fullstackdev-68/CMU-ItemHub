"use client";

import { useRef } from "react";
import React, { useState, useEffect, useCallback } from "react";
// üí° ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Types ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import type { Equipment } from "@/app/type/equipment";
import type { CreateEquipmentDto } from "@/app/type/equipment";
import { Button } from "./Button";
import api from "@/app/lib/api";

// üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Organization Item
interface OrganizationItem {
  id: number;
  name: string;
}

interface ItemFormProps {
  itemToEdit: Equipment | null;
  onClose: () => void;
  onSuccess: () => void;
  // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á Organizations ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
  selectOrg: number;
  organization: OrganizationItem[];
}

// ‚ö†Ô∏è ‡∏•‡∏ö initialFormData ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å component ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á props ‡∏Å‡πà‡∏≠‡∏ô

const ItemForm: React.FC<ItemFormProps> = ({
  itemToEdit,
  onClose,
  onSuccess,
  selectOrg,
  organization,
}) => {
  const isEditing = !!itemToEdit;
  const title = isEditing ? "Edit Equipment" : "Add New Equipment";

  // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Component
  const initialFormData: CreateEquipmentDto = {
    organizationId: selectOrg,
    categoryId: null,
    name: "",
    imageUrl: "",
    imageName: "",
    description: null,
    totalQuantity: 1,
    isAvailable: true,
  };

  const [formData, setFormData] = useState<CreateEquipmentDto>(initialFormData);
  const [loading, setLoading] = useState(false);
  const modalRef = useRef<HTMLDivElement>(null);

  const [categories, setCategories] = useState<Category[]>([]);
  const [isCategoriesLoading, setIsCategoriesLoading] = useState(false);

  // --- Image Handling States ---
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [fileError, setFileError] = useState<string | null>(null);

  // --- useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Form Data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î Add/Edit ---
  useEffect(() => {
    if (itemToEdit) {
      // ‡πÇ‡∏´‡∏°‡∏î Edit
      setFormData({
        organizationId: itemToEdit.organizationId,
        categoryId: itemToEdit.categoryId,
        name: itemToEdit.name,
        description: itemToEdit.description,
        totalQuantity: itemToEdit.totalQuantity,
        isAvailable: itemToEdit.isAvailable,
        imageUrl: itemToEdit.imageUrl || "",
        imageName: itemToEdit.imageName || "",
      });
      setImageFile(null);
    } else {
      // ‡πÇ‡∏´‡∏°‡∏î Add: ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Organization ID ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
      setFormData({
        ...initialFormData,
        organizationId: selectOrg, // ‡πÉ‡∏ä‡πâ Organization ID ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      });
      setImageFile(null);
    }
    setFileError(null);
  }, [itemToEdit, selectOrg]); // Dependency includes availableOrganizations

  useEffect(() => {
    const fetchCategories = async () => {
      setIsCategoriesLoading(true);
      try {
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ api ‡∏Ñ‡∏∑‡∏≠ instance ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const res = await api.get<Category[]>("categories");
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ res.data ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á categories
        const data: Category[] = res.data;

        setCategories(data);

        // üí° ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î Add ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ categoryId ‡πÉ‡∏ô formData ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
        if (!itemToEdit && data.length > 0) {
          setFormData((prev) => ({
            ...prev,
            categoryId: data[0].id, // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô ID ‡πÅ‡∏£‡∏Å
          }));
        }
      } catch (err) {
        console.error("Failed to fetch categories:", err);
        // alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ");
      } finally {
        setIsCategoriesLoading(false);
      }
    };
    fetchCategories();
  }, [itemToEdit]);
  // --- Handle Change ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Input ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ---
  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    > // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° HTMLSelectElement
  ) => {
    const target = e.target as
      | HTMLInputElement
      | HTMLSelectElement
      | HTMLTextAreaElement;
    const { name, value, type } = target;
    // Note: For select/textarea, target.checked will be undefined/false, so no issue here.
    const checked = (target as HTMLInputElement).checked;

    let processedValue: string | number | boolean | null;

    if (
      type === "number" ||
      name === "categoryId" ||
      name === "organizationId"
    ) {
      // üí° ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID ‡πÅ‡∏•‡∏∞ Quantity
      processedValue = value ? parseInt(value) : 0;
      if (name === "totalQuantity" && (processedValue as number) < 0)
        processedValue = 0; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    } else if (type === "checkbox") {
      processedValue = checked;
    } else {
      processedValue = value === "" && name === "description" ? null : value;
    }

    setFormData((prev: CreateEquipmentDto) => ({
      ...prev,
      [name]: processedValue,
    }));
  };

  // --- Handle Change ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Input File (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      const maxFileSize = 5 * 1024 * 1024; // 5MB

      if (!file.type.startsWith("image/")) {
        setFileError("Invalid file type. Please select an image.");
        setImageFile(null);
        e.target.value = "";
        return;
      }

      if (file.size > maxFileSize) {
        setFileError("File size exceeds 5MB limit.");
        setImageFile(null);
        e.target.value = "";
        return;
      }

      setFileError(null);
      setImageFile(file);
    } else {
      setImageFile(null);
      setFileError(null);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    const url = `${process.env.NEXT_PUBLIC_BACKEND_URL}/equipment${
      isEditing ? `/${itemToEdit!.id}` : ""
    }`;
    const method = isEditing ? "PUT" : "POST";

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    const data = new FormData();

    // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Organization ID ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if (formData.organizationId === 0) {
      alert("Please select a valid Organization.");
      setLoading(false);
      return;
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå
    if (imageFile) {
      data.append("file", imageFile);
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string)
    data.append("organizationId", String(formData.organizationId));
    data.append("categoryId", String(formData.categoryId));
    data.append("name", formData.name);
    data.append("description", formData.description ?? "");
    data.append("totalQuantity", String(formData.totalQuantity));
    data.append("isAvailable", String(formData.isAvailable));

    try {
      const response = await fetch(url, {
        method,
        body: data,
      });

      if (!response.ok) {
        const errorDetail = await response.text();
        throw new Error(`API call failed: ${errorDetail}`);
      }

      onSuccess();
    } catch (error) {
      console.error(
        `Error ${isEditing ? "updating" : "creating"} equipment:`,
        error
      );
      alert(`Failed to ${isEditing ? "update" : "add"} item.`);
    } finally {
      setLoading(false);
    }
  };

  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (modalRef.current && !modalRef.current.contains(e.target as Node)) {
      onClose();
    }
  };

  return (
    <div
      className="fixed inset-0 bg-black/50 flex justify-center items-center z-50 transition-opacity duration-300 p-4"
      onMouseDown={handleOverlayClick}
    >
      <div
        ref={modalRef}
        className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-lg transform scale-100 max-h-[95vh] overflow-y-auto"
      >
        <h2 className="text-2xl font-bold mb-6 text-indigo-700">
          {organization.find((c) => c.id === selectOrg)?.name ??
            "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"}
        </h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* üí° Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Organization */}
          <div>
            <label htmlFor="organizationId" className="">
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
            </label>
          </div>

          <hr className="my-4" />

          {/* Item Name */}
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700"
            >
              ‡∏ä‡∏∑‡πà‡∏≠
            </label>
            <input
              type="text"
              name="name"
              id="name"
              value={formData.name}
              onChange={handleChange}
              required
              className="mt-1 block w-full text-gray-700 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            {/* Total Quantity */}
            <div>
              <label
                htmlFor="totalQuantity"
                className="block text-sm font-medium text-gray-700"
              >
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
              </label>
              <input
                type="number"
                name="totalQuantity"
                id="totalQuantity"
                value={formData.totalQuantity}
                onChange={handleChange}
                required
                min="0"
                className="mt-1 block w-full text-gray-700 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>

            {/* Category ID */}
            <div>
              <label
                htmlFor="categoryId"
                className="block text-sm font-medium text-gray-700"
              >
                ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
              </label>
              <select // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å input ‡πÄ‡∏õ‡πá‡∏ô select
                name="categoryId"
                id="categoryId"
                value={formData.categoryId || ""} // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ number
                onChange={handleChange} // ‡πÉ‡∏ä‡πâ handleChange ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
                required
                disabled={isCategoriesLoading}
                className="mt-1 block w-full text-gray-700 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500 disabled:bg-gray-100"
              >
                {isCategoriesLoading && (
                  <option value="" disabled>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
                  </option>
                )}
                {/* üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° Default Option ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
                {!isCategoriesLoading && categories.length === 0 && (
                  <option value="" disabled>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                  </option>
                )}
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.categoryName} ({category.id})
                  </option>
                ))}
              </select>
            </div>
          </div>

          <hr className="my-4" />

          {/* üí° Input ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) */}
          <div className="p-4 border border-dashed border-gray-300 rounded-md bg-gray-50">
            <label
              htmlFor="file-upload"
              className="block text-sm font-bold text-gray-700 mb-2"
            >
              ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5MB)
            </label>
            <input
              type="file"
              id="file-upload"
              name="file-upload"
              accept="image/*"
              onChange={handleFileChange}
              className="block w-full text-sm text-gray-500
                file:mr-4 file:py-2 file:px-4
                file:rounded-full file:border-0
                file:text-sm file:font-semibold
                file:bg-indigo-50 file:text-indigo-700
                hover:file:bg-indigo-100
              "
            />
            {imageFile && (
              <p className="mt-2 text-sm text-green-600">
                Selected: {imageFile.name}
              </p>
            )}
            {fileError && (
              <p className="mt-2 text-sm text-red-600 font-medium">
                ‚ö†Ô∏è {fileError}
              </p>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Edit ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà */}
            {isEditing && !imageFile && formData.imageUrl && (
              <p className="mt-2 text-xs text-gray-500">
                ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:{" "}
                <a
                  href={formData.imageUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-indigo-600 truncate"
                >
                  {formData.imageName || formData.imageUrl}
                </a>
              </p>
            )}
          </div>

          {/* Description */}
          <div>
            <label
              htmlFor="description"
              className="block text-sm font-medium text-gray-700"
            >
              ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
            </label>
            <textarea
              name="description"
              id="description"
              value={formData.description || ""}
              onChange={handleChange}
              rows={3}
              className="mt-1 block w-full text-gray-700 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          {/* Is Available Checkbox */}
          <div className="flex items-center pt-2">
            <input
              type="checkbox"
              name="isAvailable"
              id="isAvailable"
              checked={formData.isAvailable}
              onChange={handleChange}
              className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
            />
            <label
              htmlFor="isAvailable"
              className="ml-2 block text-sm font-medium text-gray-700"
            >
              ‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ
            </label>
          </div>

          <div className="flex justify-end space-x-3 pt-4 border-t mt-6">
            <Button
              type="button"
              variant="secondary"
              onClick={onClose}
              disabled={loading}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button type="submit" disabled={loading}>
              {loading
                ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..."
                : isEditing
                ? "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ItemForm;
